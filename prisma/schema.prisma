generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Next Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        Int
  role          UserRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  Blog          Blog[]

  @@index([roleId])
}

model UserRole {
  id   Int    @id @default(autoincrement())
  role String
  User User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next Auth Models

// Timeline Models
model Timeline {
  id           String        @id @default(cuid())
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  date         DateTime
  contentText  ContentText?
  contentLink  ContentLink?
  contentImg   ContentImg?
  contentTweet ContentTweet?
}

model ContentText {
  id         String   @id @default(cuid())
  content    String   @db.Text
  timelineId String   @unique
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
}

model ContentLink {
  id         String   @id @default(cuid())
  content    String?  @db.Text
  link       String
  timelineId String   @unique
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
}

model ContentImg {
  id         String   @id @default(cuid())
  content    String?  @db.Text
  img        String
  timelineId String   @unique
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
}

model ContentTweet {
  id         String   @id @default(cuid())
  content    String?  @db.Text
  tweet      String
  timelineId String   @unique
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
}

// End Timeline Models

// Blog Models
model Blog {
  id         String        @id @default(cuid())
  slug       String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  title      String
  content    String?       @db.Text
  published  Boolean       @default(false)
  tags       BlogOnTags[]
  author     User          @relation(fields: [authorId], references: [id])
  authorId   String
  provider   BlogProvider? @relation(fields: [providerId], references: [id])
  providerId Int?
  link       String?

  @@index([authorId])
  @@index([providerId])
}

model BlogOnTags {
  id     String  @id @default(cuid())
  blog   Blog    @relation(fields: [blogId], references: [id])
  blogId String
  tag    BlogTag @relation(fields: [tagId], references: [id])
  tagId  String

  @@index([blogId])
  @@index([tagId])
}

model BlogTag {
  id         String       @id @default(cuid())
  slug       String       @unique
  name       String
  BlogOnTags BlogOnTags[]
}

model BlogProvider {
  id      Int    @id @default(autoincrement())
  slug    String @unique
  name    String
  favicon String
  Blog    Blog[]
}

// End Blog Models
