package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/sor4chi/portfolio-blog/server/entity"
	"github.com/sor4chi/portfolio-blog/server/graph/model"
	"github.com/sor4chi/portfolio-blog/server/middleware"
	"github.com/sor4chi/portfolio-blog/server/service"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, password string) (*model.LoginPayload, error) {
	res, err := service.UserLogin(ctx, password)

	return &model.LoginPayload{
		Token: res.Token,
	}, err
}

// CreateBlog is the resolver for the createBlog field.
func (r *mutationResolver) CreateBlog(ctx context.Context, input model.BlogInput) (*model.Blog, error) {
	_, ok := middleware.AuthCtxValue(ctx)
	if !ok {
		return nil, fmt.Errorf("unauthorized")
	}

	bs := service.NewBlogService(r.DB, true)

	blog, err := bs.CreateBlog(
		input.Title,
		input.Slug,
		input.Description,
		input.Content,
		input.Published,
		model.ParseTagInputList(input.Tags),
	)

	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(blog), nil
}

// UpdateBlog is the resolver for the updateBlog field.
func (r *mutationResolver) UpdateBlog(ctx context.Context, id string, input model.BlogInput) (*model.Blog, error) {
	_, ok := middleware.AuthCtxValue(ctx)
	if !ok {
		return nil, fmt.Errorf("unauthorized")
	}

	bs := service.NewBlogService(r.DB, true)

	blog, err := bs.UpdateBlog(
		id,
		input.Title,
		input.Slug,
		input.Description,
		input.Content,
		input.Published,
		model.ParseTagInputList(input.Tags),
	)

	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(blog), nil
}

// DeleteBlog is the resolver for the deleteBlog field.
func (r *mutationResolver) DeleteBlog(ctx context.Context, id string) (*model.Blog, error) {
	_, ok := middleware.AuthCtxValue(ctx)
	if !ok {
		return nil, fmt.Errorf("unauthorized")
	}

	var blog entity.Blog
	if err := r.DB.Where("id = ?", id).First(&blog).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&blog).Error; err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(&blog), nil
}

// Blogs is the resolver for the blogs field.
func (r *queryResolver) Blogs(ctx context.Context, input model.BlogListInput) (*model.BlogListResult, error) {
	_, isAuthenticated := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.DB, isAuthenticated)

	blogs, total, err := bs.GetBlogs(input.Limit, input.Offset, input.Tags)
	if err != nil {
		return nil, err
	}

	return &model.BlogListResult{
		Total: total,
		Data:  model.NewBlogsFromEntityList(blogs),
	}, nil
}

// Blog is the resolver for the blog field.
func (r *queryResolver) Blog(ctx context.Context, slug string) (*model.Blog, error) {
	_, isAuthenticated := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.DB, isAuthenticated)

	blog, err := bs.GetBlogBySlug(slug)
	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(blog), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
