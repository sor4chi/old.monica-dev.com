package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"strconv"

	"github.com/sor4chi/portfolio-blog/server/entity"
	"github.com/sor4chi/portfolio-blog/server/graph/model"
	"github.com/sor4chi/portfolio-blog/server/middleware"
	"github.com/sor4chi/portfolio-blog/server/service"
)

// Tags is the resolver for the tags field.
func (r *blogResolver) Tags(ctx context.Context, obj *model.Blog) ([]*model.Tag, error) {
	ts := service.NewTagService(r.Q)

	id, err := strconv.ParseInt(obj.ID, 10, 32)
	if err != nil {
		return nil, err
	}
	tags, err := ts.GetTagsByBlogId(int32(id))
	if err != nil {
		return nil, err
	}

	return model.NewTagsFromEntityList(tags), nil
}

// CreateBlog is the resolver for the createBlog field.
func (r *mutationResolver) CreateBlog(ctx context.Context, input model.BlogInput) (*model.Blog, error) {
	authCtx, _ := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.Q, authCtx.Username != nil)
	ts := service.NewTagService(r.Q)

	blog, err := bs.CreateBlog(
		input.Title,
		input.Slug,
		input.Description,
		input.Content,
		input.Published,
	)
	if err != nil {
		return nil, err
	}

	var tagsIds []int32
	for _, tag := range input.Tags {
		t, err := ts.CreateTag(&entity.Tag{
			Slug: tag.Slug,
			Name: tag.Name,
		})
		if err != nil {
			return nil, err
		}
		tagsIds = append(tagsIds, t.ID)
	}

	err = ts.CreateBlogTags(blog.ID, tagsIds)
	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(blog), nil
}

// UpdateBlog is the resolver for the updateBlog field.
func (r *mutationResolver) UpdateBlog(ctx context.Context, id string, input model.BlogInput) (*model.Blog, error) {
	panic("UpdateBlog is not implemented")
}

// DeleteBlog is the resolver for the deleteBlog field.
func (r *mutationResolver) DeleteBlog(ctx context.Context, id string) (*model.Blog, error) {
	panic("DeleteBlog is not implemented")
}

// Blogs is the resolver for the blogs field.
func (r *queryResolver) Blogs(ctx context.Context, input model.BlogListInput) (*model.BlogList, error) {
	authCtx, _ := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.Q, authCtx.Username != nil)
	var blogs []*entity.Blog
	var total int
	var err error

	if len(input.Tags) > 0 {
		blogs, total, err = bs.GetBlogsByTagSlugs(input.Limit, input.Offset, input.Tags)
	} else {
		blogs, total, err = bs.GetBlogs(input.Limit, input.Offset)
	}

	if err != nil {
		return nil, err
	}

	return &model.BlogList{
		Total: int(total),
		Data:  model.NewBlogsFromEntityList(blogs),
	}, nil
}

// Blog is the resolver for the blog field.
func (r *queryResolver) Blog(ctx context.Context, slug string) (*model.Blog, error) {
	authCtx, _ := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.Q, authCtx.Username != nil)
	b, err := bs.GetBlogBySlug(slug)
	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(b), nil
}

// BlogByID is the resolver for the blogById field.
func (r *queryResolver) BlogByID(ctx context.Context, id string) (*model.Blog, error) {
	authCtx, _ := middleware.AuthCtxValue(ctx)
	bs := service.NewBlogService(r.Q, authCtx.Username != nil)
	intId, err := strconv.ParseInt(id, 10, 32)
	if err != nil {
		return nil, err
	}
	b, err := bs.GetBlogById(int32(intId))
	if err != nil {
		return nil, err
	}

	return model.NewBlogFromEntity(b), nil
}

// Blog returns BlogResolver implementation.
func (r *Resolver) Blog() BlogResolver { return &blogResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type blogResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
