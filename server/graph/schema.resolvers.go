package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/sor4chi/portfolio-blog/server/entity"
	"github.com/sor4chi/portfolio-blog/server/graph/model"
	"github.com/sor4chi/portfolio-blog/server/middleware"
	"github.com/sor4chi/portfolio-blog/server/service"
	"gorm.io/gorm"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, password string) (*model.LoginPayload, error) {
	res, err := service.UserLogin(ctx, password)

	return &model.LoginPayload{
		Token: res.Token,
	}, err
}

// CreateBlog is the resolver for the createBlog field.
func (r *mutationResolver) CreateBlog(ctx context.Context, input model.BlogInput) (*model.Blog, error) {
	panic(fmt.Errorf("not implemented: CreateBlog - createBlog"))
}

// UpdateBlog is the resolver for the updateBlog field.
func (r *mutationResolver) UpdateBlog(ctx context.Context, id string, input model.BlogInput) (*model.Blog, error) {
	panic(fmt.Errorf("not implemented: UpdateBlog - updateBlog"))
}

// DeleteBlog is the resolver for the deleteBlog field.
func (r *mutationResolver) DeleteBlog(ctx context.Context, id string) (*model.Blog, error) {
	panic(fmt.Errorf("not implemented: DeleteBlog - deleteBlog"))
}

// Blogs is the resolver for the blogs field.
func (r *queryResolver) Blogs(ctx context.Context, input model.BlogListInput) (*model.BlogListResult, error) {
	const PUBLIC_FILTER = "published_at IS NOT NULL"
	const MAX_LIMIT = 30
	if input.Limit > MAX_LIMIT {
		input.Limit = MAX_LIMIT
	}

	_, ok := middleware.AuthCtxValue(ctx)
	var blogs []*entity.Blog
	var total int64

	var q *gorm.DB

	if len(input.Tags) > 0 {
		q = r.DB.Where("id IN (?)",
			r.DB.Table("blog_tags").Select("blog_id").Where(
				"tag_id IN (?)",
				r.DB.Table("tags").Select("id").Where("slug IN (?)", input.Tags),
			),
		)
	} else {
		q = r.DB.Preload("Tags")
	}

	if !ok {
		q = q.Where(PUBLIC_FILTER)
	}

	q.Model(&entity.Blog{}).Count(&total)
	q.Limit(input.Limit).Offset(input.Offset).Find(&blogs)

	parsed := make([]*model.Blog, len(blogs))
	for i, b := range blogs {
		parsed[i] = model.NewBlogFromEntity(b)
	}

	return &model.BlogListResult{
		Total: int(total),
		Data:  parsed,
	}, nil
}

// Blog is the resolver for the blog field.
func (r *queryResolver) Blog(ctx context.Context, slug string) (*model.Blog, error) {
	const PUBLIC_FILTER = "published_at IS NOT NULL"
	_, ok := middleware.AuthCtxValue(ctx)
	var blog entity.Blog

	query := r.DB.Preload("Tags")
	if !ok {
		query = query.Where(PUBLIC_FILTER)
	}
	query = query.First(&blog, "slug = ?", slug)
	if query.Error != nil {
		return nil, query.Error
	}

	return model.NewBlogFromEntity(&blog), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
