package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"errors"
	"log"

	"github.com/sor4chi/portfolio-blog/server/ent"
	"github.com/sor4chi/portfolio-blog/server/ent/blog"
	"github.com/sor4chi/portfolio-blog/server/middleware"
	"github.com/sor4chi/portfolio-blog/server/service"
)

// CreateBlog is the resolver for the createBlog field.
func (r *mutationResolver) CreateBlog(ctx context.Context, input ent.CreateBlogInput) (*ent.Blog, error) {
	token, ok := middleware.AuthCtxValue(ctx)
	if !ok {
		return nil, errors.New("unauthorized")
	}
	log.Println(token.ExpiresAt)
	log.Println(token.IssuedAt)
	log.Println(token.Id)
	return r.client.Blog.Create().SetInput(input).Save(ctx)
}

// ShowBlog is the resolver for the showBlog field.
func (r *mutationResolver) ShowBlog(ctx context.Context, slug string) (*ent.Blog, error) {
	return r.client.Blog.Query().Where(blog.Slug(slug)).Only(ctx)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input LoginInput) (*LoginPayload, error) {
	res, err := service.UserLogin(ctx, input.Password)
	if err != nil {
		return nil, err
	}
	return &LoginPayload{
		Token: res.Token,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
