// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tag.sql

package sqlc

import (
	"context"
)

const createBlogTag = `-- name: CreateBlogTag :exec
INSERT INTO blogs_tags (blog_id, tag_id)
VALUES ($1, $2)
`

type CreateBlogTagParams struct {
	BlogID int32
	TagID  int32
}

func (q *Queries) CreateBlogTag(ctx context.Context, arg CreateBlogTagParams) error {
	_, err := q.db.ExecContext(ctx, createBlogTag, arg.BlogID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :one

INSERT INTO tags (name, slug) VALUES ($1, $2) ON CONFLICT DO NOTHING RETURNING id, name, slug, created_at, updated_at
`

type CreateTagParams struct {
	Name string
	Slug string
}

// -- CREATORS -- --
func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.Slug)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagBySlug = `-- name: GetTagBySlug :one

SELECT id, name, slug, created_at, updated_at FROM tags WHERE slug = $1
`

// -- FINDS -- --
func (q *Queries) GetTagBySlug(ctx context.Context, slug string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagBySlug, slug)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagsByBlogId = `-- name: GetTagsByBlogId :many

SELECT id, name, slug, created_at, updated_at FROM tags WHERE id IN (
    SELECT tag_id FROM blogs_tags WHERE blog_id = $1
)
`

// -- GETTERS -- --
func (q *Queries) GetTagsByBlogId(ctx context.Context, blogID int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByBlogId, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
