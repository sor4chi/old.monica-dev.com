// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blog.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getBlogBySlug = `-- name: GetBlogBySlug :one
SELECT id, title, slug, content, created_at, updated_at, published_at
FROM blogs
WHERE slug = ?
`

// input: blogs.slug
func (q *Queries) GetBlogBySlug(ctx context.Context, slug string) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const getBlogsCount = `-- name: GetBlogsCount :one
SELECT COUNT(*)
FROM blogs
`

func (q *Queries) GetBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBlogsWithTags = `-- name: GetBlogsWithTags :many
SELECT blogs.id, title, blogs.slug, content, blogs.created_at, blogs.updated_at, published_at, blog_id, tag_id, tags.id, name, tags.slug, tags.created_at, tags.updated_at
FROM blogs
LEFT JOIN blogs_tags ON blogs.id = blogs_tags.blog_id
LEFT JOIN tags ON blogs_tags.tag_id = tags.id
ORDER BY published_at DESC
LIMIT ?
OFFSET ?
`

type GetBlogsWithTagsParams struct {
	Limit  int32
	Offset int32
}

type GetBlogsWithTagsRow struct {
	ID          int32
	Title       string
	Slug        string
	Content     string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	PublishedAt sql.NullTime
	BlogID      sql.NullInt32
	TagID       sql.NullInt32
	ID_2        sql.NullInt32
	Name        sql.NullString
	Slug_2      sql.NullString
	CreatedAt_2 sql.NullTime
	UpdatedAt_2 sql.NullTime
}

// input: limit int, offset int
func (q *Queries) GetBlogsWithTags(ctx context.Context, arg GetBlogsWithTagsParams) ([]GetBlogsWithTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlogsWithTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlogsWithTagsRow
	for rows.Next() {
		var i GetBlogsWithTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.BlogID,
			&i.TagID,
			&i.ID_2,
			&i.Name,
			&i.Slug_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogBySlug = `-- name: GetPublishedBlogBySlug :one
SELECT id, title, slug, content, created_at, updated_at, published_at
FROM blogs
WHERE published_at IS NOT NULL
AND slug = ?
`

// input: blogs.slug
func (q *Queries) GetPublishedBlogBySlug(ctx context.Context, slug string) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const getPublishedBlogs = `-- name: GetPublishedBlogs :many
SELECT id, title, slug, content, created_at, updated_at, published_at
FROM blogs
WHERE published_at IS NOT NULL ORDER BY published_at DESC
LIMIT ?
OFFSET ?
`

type GetPublishedBlogsParams struct {
	Limit  int32
	Offset int32
}

// input: limit int, offset int
func (q *Queries) GetPublishedBlogs(ctx context.Context, arg GetPublishedBlogsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugs = `-- name: GetPublishedBlogsByTagSlugs :many
SELECT id, title, slug, content, created_at, updated_at, published_at
FROM blogs
WHERE published_at IS NOT NULL
AND blogs.id IN (
  SELECT blog_id
  FROM blogs_tags
  WHERE tag_id IN (
    SELECT id
    FROM tags
    WHERE tags.slug IN (?)
  )
)
ORDER BY published_at DESC
LIMIT ?
OFFSET ?
`

type GetPublishedBlogsByTagSlugsParams struct {
	Slug   string
	Limit  int32
	Offset int32
}

// input: []tags.slug
func (q *Queries) GetPublishedBlogsByTagSlugs(ctx context.Context, arg GetPublishedBlogsByTagSlugsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogsByTagSlugs, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugsCount = `-- name: GetPublishedBlogsByTagSlugsCount :one
SELECT COUNT(*)
FROM blogs
WHERE published_at IS NOT NULL
AND blogs.id IN (
  SELECT blog_id
  FROM blogs_tags
  WHERE tag_id IN (
    SELECT id
    FROM tags
    WHERE tags.slug IN (?)
  )
)
`

// input: []tags.slug
func (q *Queries) GetPublishedBlogsByTagSlugsCount(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsByTagSlugsCount, slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPublishedBlogsCount = `-- name: GetPublishedBlogsCount :one
SELECT COUNT(*)
FROM blogs
WHERE published_at IS NOT NULL
`

func (q *Queries) GetPublishedBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
