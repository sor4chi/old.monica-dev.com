// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blog.sql

package sqlc

import (
	"context"
	"database/sql"
)

const connectBlogTag = `-- name: ConnectBlogTag :exec
INSERT INTO blogs_tags (blog_id, tag_id)
VALUES (?, ?)
`

type ConnectBlogTagParams struct {
	BlogID int32
	TagID  int32
}

func (q *Queries) ConnectBlogTag(ctx context.Context, arg ConnectBlogTagParams) error {
	_, err := q.db.ExecContext(ctx, connectBlogTag, arg.BlogID, arg.TagID)
	return err
}

const createBlog = `-- name: CreateBlog :execresult

INSERT INTO blogs (title, slug, description, content, published_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateBlogParams struct {
	Title       string
	Slug        string
	Description string
	Content     string
	PublishedAt sql.NullTime
}

// -- CREATORS -- --
func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBlog,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.PublishedAt,
	)
}

const createTag = `-- name: CreateTag :execresult
INSERT INTO tags (
  name, slug
) VALUES (
  ?, ?
)
`

type CreateTagParams struct {
	Name string
	Slug string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTag, arg.Name, arg.Slug)
}

const deleteAllBlogs = `-- name: DeleteAllBlogs :exec

DELETE FROM blogs
`

// -- DELETORS -- --
func (q *Queries) DeleteAllBlogs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBlogs)
	return err
}

const deleteAllBlogsTags = `-- name: DeleteAllBlogsTags :exec
DELETE FROM blogs_tags
`

func (q *Queries) DeleteAllBlogsTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBlogsTags)
	return err
}

const deleteAllTags = `-- name: DeleteAllTags :exec
DELETE FROM tags
`

func (q *Queries) DeleteAllTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTags)
	return err
}

const getBlogBySlug = `-- name: GetBlogBySlug :one

SELECT id, title, slug, description, content, created_at, updated_at, published_at, tag_id, tag_slug, tag_name, tag_created_at, tag_updated_at
FROM blogs_tags_view
WHERE slug = ?
`

// -- FINDERS -- --
func (q *Queries) GetBlogBySlug(ctx context.Context, slug string) (BlogsTagsView, error) {
	row := q.db.QueryRowContext(ctx, getBlogBySlug, slug)
	var i BlogsTagsView
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.TagID,
		&i.TagSlug,
		&i.TagName,
		&i.TagCreatedAt,
		&i.TagUpdatedAt,
	)
	return i, err
}

const getBlogs = `-- name: GetBlogs :many

SELECT bt.id, bt.title, bt.slug, bt.description, bt.content, bt.created_at, bt.updated_at, bt.published_at, bt.tag_id, bt.tag_slug, bt.tag_name, bt.tag_created_at, bt.tag_updated_at
FROM (
  SELECT DISTINCT id FROM blogs LIMIT ? OFFSET ?
) AS d
JOIN blogs_tags_view AS bt ON d.id = bt.id
`

type GetBlogsParams struct {
	Limit  int32
	Offset int32
}

// -- GETTERS -- --
func (q *Queries) GetBlogs(ctx context.Context, arg GetBlogsParams) ([]BlogsTagsView, error) {
	rows, err := q.db.QueryContext(ctx, getBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogsTagsView
	for rows.Next() {
		var i BlogsTagsView
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.TagID,
			&i.TagSlug,
			&i.TagName,
			&i.TagCreatedAt,
			&i.TagUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogsByTagSlugs = `-- name: GetBlogsByTagSlugs :many
SELECT bt.id, bt.title, bt.slug, bt.description, bt.content, bt.created_at, bt.updated_at, bt.published_at, bt.tag_id, bt.tag_slug, bt.tag_name, bt.tag_created_at, bt.tag_updated_at
FROM (
  SELECT DISTINCT blog_id FROM blogs_tags WHERE tag_id IN (
    SELECT id FROM tags WHERE tags.slug IN (?)
  ) LIMIT ? OFFSET ?
) AS d
JOIN blogs_tags_view AS bt ON d.blog_id = bt.id
`

type GetBlogsByTagSlugsParams struct {
	Slug   string
	Limit  int32
	Offset int32
}

func (q *Queries) GetBlogsByTagSlugs(ctx context.Context, arg GetBlogsByTagSlugsParams) ([]BlogsTagsView, error) {
	rows, err := q.db.QueryContext(ctx, getBlogsByTagSlugs, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogsTagsView
	for rows.Next() {
		var i BlogsTagsView
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.TagID,
			&i.TagSlug,
			&i.TagName,
			&i.TagCreatedAt,
			&i.TagUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogsByTagSlugsCount = `-- name: GetBlogsByTagSlugsCount :one
SELECT COUNT(*) FROM blogs_tags WHERE tag_id IN (
  SELECT id FROM tags WHERE tags.slug IN (?)
)
`

func (q *Queries) GetBlogsByTagSlugsCount(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBlogsByTagSlugsCount, slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBlogsCount = `-- name: GetBlogsCount :one

SELECT COUNT(*) FROM blogs
`

// -- COUNTERS -- --
func (q *Queries) GetBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPublishedBlogBySlug = `-- name: GetPublishedBlogBySlug :one
SELECT id, title, slug, description, content, created_at, updated_at, published_at, tag_id, tag_slug, tag_name, tag_created_at, tag_updated_at
FROM blogs_tags_view
WHERE slug = ? AND published_at IS NOT NULL
`

func (q *Queries) GetPublishedBlogBySlug(ctx context.Context, slug string) (BlogsTagsView, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogBySlug, slug)
	var i BlogsTagsView
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.TagID,
		&i.TagSlug,
		&i.TagName,
		&i.TagCreatedAt,
		&i.TagUpdatedAt,
	)
	return i, err
}

const getPublishedBlogs = `-- name: GetPublishedBlogs :many
SELECT bt.id, bt.title, bt.slug, bt.description, bt.content, bt.created_at, bt.updated_at, bt.published_at, bt.tag_id, bt.tag_slug, bt.tag_name, bt.tag_created_at, bt.tag_updated_at
FROM (
  SELECT DISTINCT id FROM blogs WHERE published_at IS NOT NULL LIMIT ? OFFSET ?
) AS d
JOIN blogs_tags_view AS bt ON d.id = bt.id
`

type GetPublishedBlogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPublishedBlogs(ctx context.Context, arg GetPublishedBlogsParams) ([]BlogsTagsView, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogsTagsView
	for rows.Next() {
		var i BlogsTagsView
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.TagID,
			&i.TagSlug,
			&i.TagName,
			&i.TagCreatedAt,
			&i.TagUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugs = `-- name: GetPublishedBlogsByTagSlugs :many
SELECT bt.id, bt.title, bt.slug, bt.description, bt.content, bt.created_at, bt.updated_at, bt.published_at, bt.tag_id, bt.tag_slug, bt.tag_name, bt.tag_created_at, bt.tag_updated_at
FROM (
  SELECT DISTINCT blog_id FROM blogs_tags WHERE tag_id IN (
    SELECT id FROM tags WHERE tags.slug IN (?)
  ) AND blog_id IN (
    SELECT id FROM blogs WHERE published_at IS NOT NULL
  ) LIMIT ? OFFSET ?
) AS d
JOIN blogs_tags_view AS bt ON d.blog_id = bt.id
`

type GetPublishedBlogsByTagSlugsParams struct {
	Slug   string
	Limit  int32
	Offset int32
}

func (q *Queries) GetPublishedBlogsByTagSlugs(ctx context.Context, arg GetPublishedBlogsByTagSlugsParams) ([]BlogsTagsView, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogsByTagSlugs, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogsTagsView
	for rows.Next() {
		var i BlogsTagsView
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.TagID,
			&i.TagSlug,
			&i.TagName,
			&i.TagCreatedAt,
			&i.TagUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugsCount = `-- name: GetPublishedBlogsByTagSlugsCount :one
SELECT COUNT(*) FROM blogs_tags WHERE tag_id IN (
  SELECT id FROM tags WHERE tags.slug IN (?)
) AND blog_id IN (
  SELECT id FROM blogs WHERE published_at IS NOT NULL
)
`

func (q *Queries) GetPublishedBlogsByTagSlugsCount(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsByTagSlugsCount, slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPublishedBlogsCount = `-- name: GetPublishedBlogsCount :one
SELECT COUNT(*) FROM blogs WHERE published_at IS NOT NULL
`

func (q *Queries) GetPublishedBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
