// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blog.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createBlog = `-- name: CreateBlog :one

INSERT INTO blogs (
  title, slug, description, content, published_at
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, slug, content, created_at, updated_at, published_at
`

type CreateBlogParams struct {
	Title       string
	Slug        string
	Description string
	Content     string
	PublishedAt sql.NullTime
}

// -- CREATORS -- --
func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.PublishedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const deleteAllBlogs = `-- name: DeleteAllBlogs :exec

DELETE FROM blogs
`

// -- DELETORS -- --
func (q *Queries) DeleteAllBlogs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBlogs)
	return err
}

const deleteAllBlogsTags = `-- name: DeleteAllBlogsTags :exec
DELETE FROM blogs_tags
`

func (q *Queries) DeleteAllBlogsTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBlogsTags)
	return err
}

const deleteAllTags = `-- name: DeleteAllTags :exec
DELETE FROM tags
`

func (q *Queries) DeleteAllTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTags)
	return err
}

const getAllBlogs = `-- name: GetAllBlogs :many
SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetAllBlogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllBlogs(ctx context.Context, arg GetAllBlogsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBlogsByTagSlugs = `-- name: GetAllBlogsByTagSlugs :many
SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs WHERE id IN (
  SELECT blog_id FROM blogs_tags WHERE tag_id IN (
    SELECT id FROM tags WHERE tags.slug = ANY ($3::text[])
  )
) ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetAllBlogsByTagSlugsParams struct {
	Limit  int32
	Offset int32
	Slugs  []string
}

func (q *Queries) GetAllBlogsByTagSlugs(ctx context.Context, arg GetAllBlogsByTagSlugsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogsByTagSlugs, arg.Limit, arg.Offset, pq.Array(arg.Slugs))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBlogsByTagSlugsCount = `-- name: GetAllBlogsByTagSlugsCount :one
SELECT COUNT(*) FROM blogs_tags WHERE tag_id IN (
  SELECT id FROM tags WHERE tags.slug = ANY ($1::text[])
)
`

func (q *Queries) GetAllBlogsByTagSlugsCount(ctx context.Context, slugs []string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllBlogsByTagSlugsCount, pq.Array(slugs))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllBlogsCount = `-- name: GetAllBlogsCount :one

SELECT COUNT(*) FROM blogs
`

// -- COUNTERS -- --
func (q *Queries) GetAllBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBlogById = `-- name: GetBlogById :one

SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs WHERE id = $1
`

// -- FINDERS -- --
func (q *Queries) GetBlogById(ctx context.Context, id int32) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogById, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const getPublishedBlogBySlug = `-- name: GetPublishedBlogBySlug :one
SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs WHERE slug = $1 AND published_at IS NOT NULL
`

func (q *Queries) GetPublishedBlogBySlug(ctx context.Context, slug string) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const getPublishedBlogs = `-- name: GetPublishedBlogs :many
SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs WHERE published_at IS NOT NULL ORDER BY published_at DESC LIMIT $1 OFFSET $2
`

type GetPublishedBlogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPublishedBlogs(ctx context.Context, arg GetPublishedBlogsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugs = `-- name: GetPublishedBlogsByTagSlugs :many
SELECT id, title, description, slug, content, created_at, updated_at, published_at FROM blogs WHERE id IN (
  SELECT blog_id FROM blogs_tags WHERE tag_id IN (
    SELECT id FROM tags WHERE tags.slug = ANY ($3::text[])
  )
) AND published_at IS NOT NULL ORDER BY published_at DESC LIMIT $1 OFFSET $2
`

type GetPublishedBlogsByTagSlugsParams struct {
	Limit  int32
	Offset int32
	Slugs  []string
}

func (q *Queries) GetPublishedBlogsByTagSlugs(ctx context.Context, arg GetPublishedBlogsByTagSlugsParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedBlogsByTagSlugs, arg.Limit, arg.Offset, pq.Array(arg.Slugs))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Slug,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedBlogsByTagSlugsCount = `-- name: GetPublishedBlogsByTagSlugsCount :one
SELECT COUNT(*) FROM blogs_tags WHERE tag_id IN (
  SELECT id FROM tags WHERE tags.slug = ANY ($1::text[])
) AND blog_id IN (
  SELECT id FROM blogs WHERE published_at IS NOT NULL
)
`

func (q *Queries) GetPublishedBlogsByTagSlugsCount(ctx context.Context, slugs []string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsByTagSlugsCount, pq.Array(slugs))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPublishedBlogsCount = `-- name: GetPublishedBlogsCount :one
SELECT COUNT(*) FROM blogs WHERE published_at IS NOT NULL
`

func (q *Queries) GetPublishedBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPublishedBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBlog = `-- name: UpdateBlog :one

UPDATE blogs
SET title = $1, slug = $2, description = $3, content = $4, published_at = $5
WHERE id = $6
RETURNING id, title, description, slug, content, created_at, updated_at, published_at
`

type UpdateBlogParams struct {
	Title       string
	Slug        string
	Description string
	Content     string
	PublishedAt sql.NullTime
	ID          int32
}

// -- UPDATERS -- --
func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, updateBlog,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.PublishedAt,
		arg.ID,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}
