// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: timeline.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createTimeline = `-- name: CreateTimeline :one

INSERT INTO timelines (title, related_blog_id, category, date)
VALUES ($1, $2, $3, $4)
RETURNING id, title, related_blog_id, category, date
`

type CreateTimelineParams struct {
	Title         string
	RelatedBlogID sql.NullInt32
	Category      int32
	Date          time.Time
}

// -- CREATORS -- --
func (q *Queries) CreateTimeline(ctx context.Context, arg CreateTimelineParams) (Timeline, error) {
	row := q.db.QueryRowContext(ctx, createTimeline,
		arg.Title,
		arg.RelatedBlogID,
		arg.Category,
		arg.Date,
	)
	var i Timeline
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.RelatedBlogID,
		&i.Category,
		&i.Date,
	)
	return i, err
}

const deleteAllTimelines = `-- name: DeleteAllTimelines :exec
DELETE FROM timelines
`

func (q *Queries) DeleteAllTimelines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTimelines)
	return err
}

const deleteTimeline = `-- name: DeleteTimeline :exec

DELETE FROM timelines WHERE id = $1
`

// -- DELETORS -- --
func (q *Queries) DeleteTimeline(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTimeline, id)
	return err
}

const getAllTimelines = `-- name: GetAllTimelines :many

SELECT id, title, related_blog_id, category, date FROM timelines
`

// -- GETTERS -- --
func (q *Queries) GetAllTimelines(ctx context.Context) ([]Timeline, error) {
	rows, err := q.db.QueryContext(ctx, getAllTimelines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timeline
	for rows.Next() {
		var i Timeline
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.RelatedBlogID,
			&i.Category,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimelinesByCategories = `-- name: GetTimelinesByCategories :many
SELECT id, title, related_blog_id, category, date FROM timelines WHERE category = ANY ($1::int[])
`

func (q *Queries) GetTimelinesByCategories(ctx context.Context, categories []int32) ([]Timeline, error) {
	rows, err := q.db.QueryContext(ctx, getTimelinesByCategories, pq.Array(categories))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timeline
	for rows.Next() {
		var i Timeline
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.RelatedBlogID,
			&i.Category,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeline = `-- name: UpdateTimeline :one

UPDATE timelines
SET title = $1, related_blog_id = $2, category = $3, date = $4
WHERE id = $5
RETURNING id, title, related_blog_id, category, date
`

type UpdateTimelineParams struct {
	Title         string
	RelatedBlogID sql.NullInt32
	Category      int32
	Date          time.Time
	ID            int32
}

// -- UPDATERS -- --
func (q *Queries) UpdateTimeline(ctx context.Context, arg UpdateTimelineParams) (Timeline, error) {
	row := q.db.QueryRowContext(ctx, updateTimeline,
		arg.Title,
		arg.RelatedBlogID,
		arg.Category,
		arg.Date,
		arg.ID,
	)
	var i Timeline
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.RelatedBlogID,
		&i.Category,
		&i.Date,
	)
	return i, err
}
