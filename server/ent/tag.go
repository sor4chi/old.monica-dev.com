// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/sor4chi/portfolio-blog/server/ent/tag"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// タグの名前
	Name string `json:"name,omitempty"`
	// タグのスラッグ、URLのパラメータとして使用
	Slug string `json:"slug,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagQuery when eager-loading is set.
	Edges TagEdges `json:"edges"`
}

// TagEdges holds the relations/edges for other nodes in the graph.
type TagEdges struct {
	// Blogs holds the value of the blogs edge.
	Blogs []*Blog `json:"blogs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedBlogs map[string][]*Blog
}

// BlogsOrErr returns the Blogs value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) BlogsOrErr() ([]*Blog, error) {
	if e.loadedTypes[0] {
		return e.Blogs, nil
	}
	return nil, &NotLoadedError{edge: "blogs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tag.FieldID:
			values[i] = new(sql.NullInt64)
		case tag.FieldName, tag.FieldSlug:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tag fields.
func (t *Tag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tag.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				t.Slug = value.String
			}
		}
	}
	return nil
}

// QueryBlogs queries the "blogs" edge of the Tag entity.
func (t *Tag) QueryBlogs() *BlogQuery {
	return NewTagClient(t.config).QueryBlogs(t)
}

// Update returns a builder for updating this Tag.
// Note that you need to call Tag.Unwrap() before calling this method if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tag) Update() *TagUpdateOne {
	return NewTagClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tag) Unwrap() *Tag {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tag) String() string {
	var builder strings.Builder
	builder.WriteString("Tag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(t.Slug)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlogs returns the Blogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tag) NamedBlogs(name string) ([]*Blog, error) {
	if t.Edges.namedBlogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedBlogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tag) appendNamedBlogs(name string, edges ...*Blog) {
	if t.Edges.namedBlogs == nil {
		t.Edges.namedBlogs = make(map[string][]*Blog)
	}
	if len(edges) == 0 {
		t.Edges.namedBlogs[name] = []*Blog{}
	} else {
		t.Edges.namedBlogs[name] = append(t.Edges.namedBlogs[name], edges...)
	}
}

// Tags is a parsable slice of Tag.
type Tags []*Tag
