// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/sor4chi/portfolio-blog/server/ent/blog"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) OrderFunc {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// BlogEdge is the edge representation of Blog.
type BlogEdge struct {
	Node   *Blog  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BlogConnection is the connection containing edges to Blog.
type BlogConnection struct {
	Edges      []*BlogEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *BlogConnection) build(nodes []*Blog, pager *blogPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Blog
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Blog {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Blog {
			return nodes[i]
		}
	}
	c.Edges = make([]*BlogEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BlogEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BlogPaginateOption enables pagination customization.
type BlogPaginateOption func(*blogPager) error

// WithBlogOrder configures pagination ordering.
func WithBlogOrder(order *BlogOrder) BlogPaginateOption {
	if order == nil {
		order = DefaultBlogOrder
	}
	o := *order
	return func(pager *blogPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBlogOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBlogFilter configures pagination filter.
func WithBlogFilter(filter func(*BlogQuery) (*BlogQuery, error)) BlogPaginateOption {
	return func(pager *blogPager) error {
		if filter == nil {
			return errors.New("BlogQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type blogPager struct {
	reverse bool
	order   *BlogOrder
	filter  func(*BlogQuery) (*BlogQuery, error)
}

func newBlogPager(opts []BlogPaginateOption, reverse bool) (*blogPager, error) {
	pager := &blogPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBlogOrder
	}
	return pager, nil
}

func (p *blogPager) applyFilter(query *BlogQuery) (*BlogQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *blogPager) toCursor(b *Blog) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *blogPager) applyCursors(query *BlogQuery, after, before *Cursor) (*BlogQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBlogOrder.Field.field, p.order.Field.field, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *blogPager) applyOrder(query *BlogQuery) *BlogQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(orderFunc(direction, p.order.Field.field))
	if p.order.Field != DefaultBlogOrder.Field {
		query = query.Order(orderFunc(direction, DefaultBlogOrder.Field.field))
	}
	return query
}

func (p *blogPager) orderExpr() sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBlogOrder.Field {
			b.Comma().Ident(DefaultBlogOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Blog.
func (b *BlogQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BlogPaginateOption,
) (*BlogConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBlogPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BlogConnection{Edges: []*BlogEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	b = pager.applyOrder(b)
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// BlogOrderFieldTitle orders Blog by title.
	BlogOrderFieldTitle = &BlogOrderField{
		field: blog.FieldTitle,
		toCursor: func(b *Blog) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Title,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BlogOrderField) String() string {
	var str string
	switch f.field {
	case blog.FieldTitle:
		str = "TITLE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BlogOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BlogOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BlogOrderField %T must be a string", v)
	}
	switch str {
	case "TITLE":
		*f = *BlogOrderFieldTitle
	default:
		return fmt.Errorf("%s is not a valid BlogOrderField", str)
	}
	return nil
}

// BlogOrderField defines the ordering field of Blog.
type BlogOrderField struct {
	field    string
	toCursor func(*Blog) Cursor
}

// BlogOrder defines the ordering of Blog.
type BlogOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *BlogOrderField `json:"field"`
}

// DefaultBlogOrder is the default ordering of Blog.
var DefaultBlogOrder = &BlogOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BlogOrderField{
		field: blog.FieldID,
		toCursor: func(b *Blog) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Blog into BlogEdge.
func (b *Blog) ToEdge(order *BlogOrder) *BlogEdge {
	if order == nil {
		order = DefaultBlogOrder
	}
	return &BlogEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}
